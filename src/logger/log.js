// logger.js
import fs from "fs";
import path from "path";
import os from "os";

let isLoggingEnabled = true;
let isLoggingPaused = false;
const logFiles = {};
// const logFilesInitialized = {};
const logLevels = {
  debug: 0,
  info: 1,
  warn: 2,
  error: 3,
};
let currentLogLevel = logLevels.info;
let logContext = {};
let autoFunctionName = false;

const defaultLogFormat = (level, date, message) =>
  `[${level.toUpperCase()}] [${date.toISOString()}] ${message}`;

let logFormat = defaultLogFormat;

const pauseLogging = () => {
  isLoggingPaused = true;
};

const resumeLogging = () => {
  isLoggingPaused = false;
};

const shouldLog = (level) => {
  const logLevelEnv = process.env.WOW_JS_LOG_LEVEL;
  if (logLevelEnv) {
    const envLogLevel = logLevels[logLevelEnv.toLowerCase()];
    if (envLogLevel !== undefined && logLevels[level] < envLogLevel) {
      return false;
    }
  }
  return true;
};

const getCallingFunctionName = () => {
  try {
    throw new Error();
  } catch (err) {
    const stackLines = err.stack.split("\n");
    const callingLine = stackLines[4];
    if (!callingLine) {
      return "general";
    }
    const functionNameMatch = callingLine.match(/at\s+(.+?)\s+\(/);
    return functionNameMatch ? functionNameMatch[1] : "general";
  }
};
let logDirectory = process.cwd(); // Default to current working directory
const log = (functionName, level, message, data) => {
  if (!isLoggingEnabled || isLoggingPaused || !shouldLog(level)) {
    return;
  }

  const actualFunctionName =
    functionName || (autoFunctionName ? getCallingFunctionName() : "general");
  let logFilePath = logFiles[actualFunctionName];

  if (!logFilePath) {
    logFilePath = path.join(logDirectory, `wow-js-${actualFunctionName}.log`);
    logFiles[actualFunctionName] = logFilePath;
    // Check if "Generated by wow-js" already exists
    try {
      const fileContent = fs.readFileSync(logFilePath, "utf8");
      if (!fileContent.includes("Generated by wow-js")) {
        fs.appendFile(logFilePath, `Generated by wow-js\n`, (err) => {
          if (err) {
            console.error(
              `Error initializing log file for ${actualFunctionName}: ${err}`
            );
          }
        });
      }
    } catch (err) {
      // File doesn't exist; write the message
      fs.appendFile(logFilePath, `Generated by wow-js\n`, (err) => {
        if (err) {
          console.error(
            `Error initializing log file for ${actualFunctionName}: ${err}`
          );
        }
      });
    }
  }

  const date = new Date();
  let formattedMessage = logFormat(level, date, message);

  if (data !== undefined) {
    formattedMessage += ": ";
    if (typeof data === "string") {
      formattedMessage += data;
    } else if (Array.isArray(data)) {
      formattedMessage += JSON.stringify(data);
    } else if (typeof data === "object" && data !== null) {
      formattedMessage += JSON.stringify(data, null, 2);
    } else {
      formattedMessage += String(data);
    }
  }

  if (logContext && Object.keys(logContext).length > 0) {
    formattedMessage += ` Context: ${JSON.stringify(logContext)}`;
  }

  // Debugging: Log formatted message before writing
  // console.log("wowLog: logContext", logContext)
  // console.log('wowLog: Formatted message:', formattedMessage);

  fs.appendFile(
    logFilePath,
    formattedMessage +
      "\n" +
      "--------------------------------------------------\n",
    (err) => {
      if (err) {
        console.error(
          `Error writing to log file for ${actualFunctionName}: ${err}`
        );
      }
    }
  );
};

const writeLogHeading = (heading, functionName) => {
  const actualFunctionName = functionName || "general";
  let logFilePath = logFiles[actualFunctionName];

  if (!logFilePath) {
    logFilePath = path.join(logDirectory, `wow-js-${actualFunctionName}.log`);
    logFiles[actualFunctionName] = logFilePath;
  }
  const actualHeading = heading || "Log Heading"; // Default heading
  fs.appendFile(
    logFilePath,
    `\n================== ${actualHeading} ==================\n`,
    (err) => {
      if (err) {
        console.error(
          `Error writing log heading for ${actualFunctionName}: ${err}`
        );
      }
    }
  );
};

const makeReadOnly = (filePath) => {
  if (os.platform() === "win32") {
    fs.chmod(filePath, 0o444, (err) => {
      if (err) {
        console.error(`Error setting read-only for ${filePath}: ${err}`);
      }
    });
  } else {
    fs.chmod(filePath, 0o444, (err) => {
      if (err) {
        console.error(`Error setting read-only for ${filePath}: ${err}`);
      }
    });
  }
};

const disableLogging = () => {
  isLoggingEnabled = false;

  // Iterate over the logFiles and make them read-only
  for (const functionName in logFiles) {
    if (logFiles.hasOwnProperty(functionName)) {
      const filePath = logFiles[functionName];
      makeReadOnly(filePath);
    }
  }

  // Clear the logFiles object
  Object.keys(logFiles).forEach((filename) => delete logFiles[filename]);
};

const wowLog = {
  setLevel: (level) => {
    currentLogLevel = logLevels[level] || currentLogLevel;
  },
  format: (formatFunction) => {
    logFormat = formatFunction;
  },
  debug: (message, ...data) => {
    log(null, "debug", message, data.length > 0 ? data : undefined);
  },
  info: (message, ...data) => {
    log(null, "info", message, data.length > 0 ? data : undefined);
  },
  warn: (message, ...data) => {
    log(null, "warn", message, data.length > 0 ? data : undefined);
  },
  error: (message, ...data) => {
    log(null, "error", message, data.length > 0 ? data : undefined);
  },
  setLogDirectory: (directory) => {
    try {
      if (!fs.existsSync(directory)) {
        fs.mkdirSync(directory, { recursive: true }); // Create directory if it doesn't exist
      }
      logDirectory = directory;
    } catch (err) {
      console.error(`wowLog: Error setting log directory: ${err.message}`);
    }
  },
  pause: pauseLogging,
  resume: resumeLogging,
  addContext: (data) => {
    logContext = data;
  },
  clearContext: () => {
    logContext = {};
  },
  writeHeading: writeLogHeading,
  disable: disableLogging,
  setAutoFunctionName: (enabled) => {
    if (enabled != true && enabled != false) {
      autoFunctionName = false;
      console.warn(
        "wowLog: You must pass a boolean value as argument else predefined settings is executed."
      );
      return;
    }
    autoFunctionName = enabled;
    if (enabled) {
      console.warn(
        "wowLog: Automatic function name collection is enabled. This feature has potential reliability and performance issues."
      );
    }
  },
};

export default wowLog;
